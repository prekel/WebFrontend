{"version":3,"sources":["components/Navbar.tsx","components/ProductCard.tsx","components/Cart.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navbar","className","href","type","data-toggle","data-target","id","ProductCard","msg","onClick","useState","n","setN","htmlFor","event","button","Cart","count","App","message","setCount","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"4JAEaA,EAAkC,kBAC7C,yBAAKC,UAAU,kDACb,uBAAGA,UAAU,eAAeC,KAAK,cAAjC,mNAGA,4BACED,UAAU,iBACVE,KAAK,SACLC,cAAY,WACZC,cAAY,2BAEZ,0BAAMJ,UAAU,yBAElB,yBAAKA,UAAU,2BAA2BK,GAAG,0BAC3C,wBAAIL,UAAU,sBACZ,wBAAIA,UAAU,YACZ,uBAAGA,UAAU,WAAWC,KAAK,cAA7B,yCAIF,wBAAID,UAAU,YACZ,uBAAGA,UAAU,WAAWC,KAAK,aAA7B,sECrBGK,EAGR,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,IAAKC,EAAc,EAAdA,QAAc,EACPC,oBAAU,GADH,mBAClBC,EADkB,KACfC,EADe,KAGzB,OACE,yBAAKX,UAAU,SACb,2BAAOE,KAAK,OAAOG,GAAG,UACtB,2BAAOO,QAAQ,QAAQZ,UAAU,UAC9BO,GAEH,4BAAQC,QAAS,kBAAMA,OACtBE,EACD,4BACEV,UAAU,cACVQ,QAAS,SAACK,GAAD,OAA6BF,EAAKE,EAAMC,aChB5CC,EAAmD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACjE,OACE,oCACE,2BAAIA,KCgBKC,EAhB2C,SAAC,GAAgB,EAAdC,QAAe,IAAD,EAC/CT,mBAAS,GADsC,mBAClEO,EADkE,KAC3DG,EAD2D,KAEzE,OACE,oCACE,kBAAC,EAAD,MACA,yBAAKnB,UAAU,cACb,kBAAC,EAAD,CAAMgB,MAAOA,IACb,kBAAC,EAAD,CACET,IAAI,QACJC,QAAS,kBAAMW,EAASH,EAAQ,SCFtBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAKT,QAAQ,UAEfU,SAASC,eAAe,SD+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMnB,a","file":"static/js/main.fb58fb03.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const Navbar: React.FunctionComponent = () => (\r\n  <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\r\n    <a className=\"navbar-brand\" href=\"index.html\">\r\n      Многочлены и алгебраические уравнения\r\n    </a>\r\n    <button\r\n      className=\"navbar-toggler\"\r\n      type=\"button\"\r\n      data-toggle=\"collapse\"\r\n      data-target=\"#navbarSupportedContent\"\r\n    >\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav ml-auto\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"tasks.html\">\r\n            Задачи\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"form.html\">\r\n            Форма ввода\r\n          </a>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </nav>\r\n);\r\n","import React, { useState } from \"react\";\r\n\r\nexport const ProductCard: React.FunctionComponent<{\r\n  msg: string;\r\n  onClick: () => void;\r\n}> = ({ msg, onClick }) => {\r\n  const [n, setN] = useState(-1);\r\n\r\n  return (\r\n    <div className=\"input\">\r\n      <input type=\"text\" id=\"title\"></input>\r\n      <label htmlFor=\"title\" className=\"active\">\r\n        {msg}\r\n      </label>\r\n      <button onClick={() => onClick()}></button>\r\n      {n}\r\n      <button\r\n        className=\"btn-primary\"\r\n        onClick={(event: React.MouseEvent) => setN(event.button)}\r\n      ></button>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport const Cart: React.FunctionComponent<{ count: number }> = ({ count }) => {\r\n  return (\r\n    <>\r\n      <p>{count}</p>\r\n    </>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\nimport { Navbar } from \"./components/Navbar\";\nimport { ProductCard } from \"./components/ProductCard\";\nimport { Cart } from \"./components/Cart\";\n\nconst App: React.FunctionComponent<{ message: string }> = ({ message }) => {\n  const [count, setCount] = useState(0);\n  return (\n    <>\n      <Navbar />\n      <div className=\"constainer\">\n        <Cart count={count}></Cart>\n        <ProductCard\n          msg=\"sdad1\"\n          onClick={() => setCount(count + 1)}\n        ></ProductCard>\n      </div>\n    </>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App message=\"dsa1\" />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}